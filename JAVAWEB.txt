1. WEB 主程式架構 : Client -- HTTP請求/回應 -- WEB 伺服器

2. WEB 應用程式技術範疇 :
     2-1. JAVAServlet 架構 : Client -- HTTP請求/回應 -- WEB 伺服器(WEB container Servlet)-> DB/HTML 
     2-2. Servlet 效能     : 符合多執行續

3. JSP : 解決 Servlet 開發不易問題 (MVC 架構中為渲染器)

4. Web Application : 直接由 Web 來進行 , 不須使用者安裝於本身系統中
     4-1. passive 靜態 : HTML / txt / css
     4-2. active  動態 : Servlet / JSP
	 4-3. 需存在於 web Application server 中
	 4-4. servlet / JSP 由 servlet container

5. TCP/IP 網路模型 :  
     5-1. 應用層 : HTTP
     5-2. 傳輸層 : TCP
     5-3. 網路層 : IP
     5-4. 鏈結層
     5-5. 三相交握	: A丟(syn) -> B接確認 -> B丟(syn+ack) -> A確認丟(ack) -> B接  // A = Client , B = Server

6. HTTP 協定
     6-1. URI(統一資源標誌符)
     6-2. URL(統一資源標定位符)
     6-3. URN(統一資源標名稱)
     6-4. Initial line : 請求->方法 + URI + HTTP 版本 / 回應 : HTTP 版本 + 狀態 	

7. GET vs POST 
     7-1. GET  : 限制 8K
     7-2. POST : 限制 2G 夾帶數據於 request body

8. JavaWEB 目錄結構 : 專案名稱 -> html / WEB-INF -> web.xml // 於 WEB-INF 下的不可直接訪問

9. 送出請求(request)
     9-1. request event -> HyperLink / HTML Form 等等 
	 9-2. 使用 Get  的情境與限制 : 得到網頁圖片等等
	 9-3. 使用 Post 的情境與限制 : 重送大量資料給 Server 處理

10. 處理請求 : JavaEE -> servlet / servlet.Http 開發協定 extend HttpServlet or GenericServlet 
      10-1. HttpServlet extend GenericServlet 始於 GenericServlet 無常使用
	  10-2. GenericServlet : 可以管理 Servlet 週期 , 要覆寫 service() 處理 client 端
	  10-3. HttpServlet    : 非必要不要覆寫 service() , service() 會自動根據 Http 請求
	  10-4. HttpServlet    : Client -> Server -> Service() -> do...();

11. servlet 部屬類型: GeroageServlet(部屬 xml) / HttpServlet (@註釋 / web.xml)

12. 使用註釋@配置 Servlet 
      12-1. @WebServlet 使用標記設定對應 : JavaEE 6 開放
	  12-2. @WebServlet ( name="servlet 名稱" , urlPatterns={"",""} )
	  

13. 分析請求 ServletRequest (HTML or JSP name 值)
      13-1. String      getParameter(String name);      // 取得 name 參數
      13-2. String[]    getParameterValue(String name); // 取得 name 內容值參數
      13-3. Enumeration	getParameterNames()             // 取得所有 Client 參數

14. 送出回應 
      14-1. 利用 ServletResponse     所提供的方法來回應 setContentType / getWrite / getOutputStream
      14-2. 利用 HttpServletResponse 所提供的方法來回應	setHeader / setStatus / sendRedirect / sendError   
      14-3. sendRedirect 需要在 committed 前或使用 if...else
      14-4. sendStatus(int sc) 設定狀態碼	  
	  14-5. sendError(res... , "錯誤訊息") 傳送指定錯誤訊息

15. 分析 Header 
      15-1. 處理 HTTP 協議標頭
      15-2. Enumeration<String> headers = req.getHeaderNames(); // 取得所有標頭
            While(headers.hasMoreElements()){
			 String header = (String)headers.nextElement();     // 延續取出
			 String value  = req.getHeader("header");           // 取出標頭內容值 
			}

16. 生命週期 
      16-1. 載入 : Load / 初始 : Initializing / 執行與銷毀 : Servcing & Destroy / 卸載 : Unload 
      16-2. 週期 : Load -|init()|-> Initialized <-|Service()|-> Servcing 	  
     	                                ->|destory()|-> Destroyed -> shutdown -> Unload<-|shutdown , startup|-> Load 循環 
      16-3. servlet life cycle 相關方法 :
            方法名稱                                        簡要說明
            void init(ServletConfig config)			        ServletContainer 會呼叫此方法進行 Servlet 初始化
			void init()                                     Developer 可覆寫此方法自行撰寫 servlet
			void Server(Servlet req , Servlet resp)         服務 Client 端來的要求(req)
    	    void destory()                                  當 Servlet container 決定要卸除可使用此方法
      16-4. init(ServletConfig config)                      取得 web.xml 中訊息 
      16-5. init(ServletConfig config) = _config = config; init() // config 是 servlet 組態
            基本都都是使用 init()

17. 協調 Servlet 行程 RequestDispatch
      17-1. req.getRequestDispath("位置") 取得重導位置的 ServletContext
      17-2. forward 將 req & res 傳給導入位置接手
      17-3. include 將 req & res 傳給導入位置主導權還在自身
      17-4. forward(丟給 servlet 並繼續維護 request & response) vs sendRedirect(丟給瀏覽器(browser))

18. ServletConfig 介面 : 僅提供 get 方法 , 無法增加或修任何屬於 ServletConfig 物件中的參數
      18-1. servlet container -> init(ServletConfig config) -> GenericServlet
      18-2. String getInitParameter(String name()); // 取得參數內容
      18-3. Enumeration getInitParameterNames();    // 取得所有參數名稱
      18-4. ServletContext getServletContext();     // 抓取 ServletContext 物件
      18-5. String getServletContextName();         // 抓取 Servlet 名稱

19. ServletContext 介面 : 用於與 Servlet Container 溝通方法 , 每個 web Application 只有一個 servletContext
      19-1. getResource(String path);               // 擷取 path 路徑所指向的資源
      19-2. getResourceAsStream(String path);	    // 擷取 path 路徑所指向的資源(串流)

20. Servlet 分享資源方法
      20-1. ServletRequest : 存在於 request 生命週期中 
      20-2. ServletSession : 相同的 active Client(瀏覽器) 可以存取  
	  20-3. ServletContext : 存在於 active web Application 中 , 當下所有 servlet 皆可以存取
	  20-4. Object getAttribute(String name); // 得到 Servlet Context 的內容
	  20-5. Enumeration getAttributeNames();  // 取得 Contener 中所有可用資源
	  20-6. void setAttribute();              // 新增或修改內容

21. Servlet 註釋補充
      21-1. @WebServlet("") // 無須編寫 xml
      21-2. 非同步 Servlet : asyncSupported = true -> AsyncContext ctx = req.startAsyn(); // 保留 Client 物件緩至 complete 後執行
	  21-3. @WebInitParam  : @WebInitParam(name= "Rose", value= "India") // 配置基本屬性 
	  21-4. @WebFilter("路徑")  : @WebFilter("/servlet/*") 在此檔案下都須都得執行此 class
	  21-5. @WebListner
	  21-6. @MultipartConfig // 表單設定

22. FileUpload
      22-1. 表單編碼以串流文件(IntputStreamReader-> getParts()取代)
            1. enctype="application/x-www-form-urlencoded"(default) &=字斷辨識符
	        2. enctype="multipart/form-data" boundry=字斷辨識符 // 用於上傳圖片
            3. enctype="text/plain" ' ' = 字斷辨識符
			4. 上傳檔案(範例) 

23. Filiter
      23-1. @WebFilter 部屬
	  23-2. chain.doFilter(req, res); // 通過 Filiter

24. Session (第三方 cookie 已被停用)
      24-1. HttpSession 運作原理 : 
	         - 主機端產生透過雲端丟給 Client  , 下次連接時可以確認 , 有 TimeOut 問題預設 30 分鐘
             - 當 client 接收到 Session 時 Http header 會新增 cookie = JESSIONID
             - 得到 session	: req.getSession(boolean create); //(false 登入獲取) / (true 登入存取[連續取用])		 
             - 新建得到屬性 session.setAttribute("",) or session.getAttribute(""); // 要作適當轉型
			 - session 失效 : session.invalidate() or 設定 timeout : setMaxInactiveInterval(秒);
			   or web.xml 設定 並 getMaxInactiveInterval();

25. MVC模型簡介
      25-1. Servlet 因編譯上的困難而誕生 JSP
      25-2. JSP 標籤字樣 : <%@> 指令 /  <%!> 實作 / <%> 程式 / <%=> out.print / <%-- 註解 / ${} EL (較常使用)
      25-3. 處理JSP : JSP is Servlet (將JSP 視為原始碼) / 轉換為相對應的 Servlet
      25-4. JSP 可使用原本 Servlet 可使用的變數 包含(req/resp) // <%= req.... %>
      25-5. MVC : M(Model     ) 解決問題的計算模型
                  V(View      ) 將模型解果呈現給使用者
                  C(Controller) 負責取得輸入資訊作的前置處理	
      25-6. client -> Req -> 1.C -> 
	                         2.M(委託模型處理)  -> 
							 3.V(C轉發畫面回映) -> 4.M(查詢M狀態) -> 5.V(V發送)HTTP 回應
      25-7. M -> POJO 實作 / V -> JSP(裡包 HTML) / C -> Servlet  

26. Java Server Page(在 Spring 內實作練習) 
      26-1. JSP 標籤字樣 : <%@> 指令 /  <%!> 實作 / <%> 程式 / <%=> out.print / <%-- 註解 / ${} EL (較常使用)	  
      26-2. 語法元素 :
	        - Comments      註解 : 單行 <%//...%> / 多<%/*...*/%> or <%--...--%>
            - Directives    指令 : <%@   page(屬性設定) / include(告知jsp要包含外部 HTML , JSP) / taglib(工具) %>
            - Declarations  宣告 : <%! ...%>
            - Scriptlet 程式片段 : <%...%>
      26-3. Page 宣告屬性(屬於 Directives層級)
            - 在 translation(編譯) 時期先行將該相關資訊給 engine(引勤)
            - 屬性元 : import / session / errorPage / isErrorPage / buffer / autoFlush / isThreadSafe / 
			           contentType / pageEncodeing / language / extend / info(文字資訊) 等
              EX : <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
			       <%@ page errorPage  =" ...jsp"%>  // 錯誤頁面
				   <%@ page isErrorPage="true"%>     // 繼承前 page 的 exception 開啟則不可單獨執行
                   <%@ page import  ="" %>
                   <%@ page session ="false" %>      // 關閉 session 隱含變數
	 25-4. 隱含變數
	       - 不須對特定變數進行宣告並可以直接存取(在jsp cycle 中的 _jspService()中已被自動定義)
		   - req / resp / out / session / application / config / pageContext / page /exception
		   - req / resp 是定義在 _jspService()的方法參數列中 , 其餘都在方法內
		   - exception 需開啟 isErrorPage 才會被宣告
		   - application 提供 web application 的環境變數
		   - session     提供 Http Session 機制
		   - req / resp  使用 HttpServletRequset / HttpServletResponse
		   - page        指向自己(this)
		   - pageContext 讓 JSP 能直接使用 PageContextm 的環境資訊 EX: out / forword 等
		   - config      讓 JSP Pages 於 web.xml 取得設定值
		   - exception   讓 JSP 取得 Throwable 的例外
				   