目錄 : 基礎介紹 
 
何謂框架
  - 框 : 範圍(解決一部分範圍內的問題)
  - 架 : 支撐(實現開發流程)
  - 框架 : 技術解決與整合方案的半成品

Spring 由來
  - J2EE -> Spring
  - 2002 -> Spring    + Hibernate (ORM框架)
         -> Struts    + Spring + Hibernate (組合已死) 
  - 後續 -> SpringMVC + spring + Hibernate or MyBaits or Spring JPA
  - 2021 -> SpringBoot(把原要設定改成預設值)  
  
Spring 創作目的
  
  - 非侵入式程式設計架構
      - POJO(Plain old Java Object)     // 普通的 Java 物件解不受任何限制
      - 業務邏輯程式 , 不含框架程式碼 	// 資源配置都在 applicationContent.xml
      - 讓業務邏輯可以自由移出各框架
	  - 讓設定檔定義 class 意義
  
  - 管理物件生命週期
      - 透過 xml 的配置並建立物件依賴關係

一站 Web 應用框架
  - 表現層    (Web層)
      - SpringMVC
  - 業務邏輯層(Service層)
      - Spring
  - 資料訪問層
      - SpringORM(DAO層) : JPA / HibernateTrmplate / MyBaits

特性:
  - 輕量級 Framwork
      - 重量級 and 輕量級 : 是否相依容器
        Servlet    Spring
      
	  - 不相依特定 JavaEE
      - 單純地將元件部屬到 spring 中  	  

模組:
  - AOP 攔截器 / ORM / DAO / Web / Context / MVC
  -              Spring Core

技術名詞(重要):
  - Java靜態 new / 動態 Class.forname()
  - IOC 反轉注入 配置於 spring 檔中的物件 擁有第三方來保證創建物建 , 容易管理生命週期
  - DI  依賴注入 建構子 / setter
  - AOP	方面導向 比　webFilter 更強

------------------------------------------------------------------------------------------------------------------------

目錄 : IOC / DI / Bean 配置 /Bean scope / Bean 呼叫 / ref / autowire  
  
基本 Spring 操作(範例 : session01 -> hello) 
  - 1. Bean物件規劃 -> applicationContent.xml 配置 or Java 註釋配置 -> 測試(Junit) 

Spring IOC / DI
  1. 輕量級 Framwork
    - DI  (Dependency Injection)        : 依賴注入     -> 建構子與 get/set 注入
    - IOC (Inversion of Control)        : 反轉控制     -> 透過第三方注入
    - AOP (Aspect Oriented Programming) : 方面導向設計 -> 增強版 webFiliter
  
  2. Bean 的配置(範例 : session02) 
    - 可透過 applicationContent.xml or @Configuration
    - bean scope : 
        1. 單一實例(預設) : singleton
        2. 多個實例       : prototype
        3. Web應用        : request / session / global-session
  
  3. Bean 呼叫( 回傳type : ApplicationContext , 範例 : session02 -> Lotto)
    - xml  配置 : 
	    1. 透過 ClassPathXmlApplicationContext("applicationContext.xml"); // 找到 applicationContext.xml 的 內容
        2. 使用 getBean("Bean id" , Bean物件.class);
    
	- Java 配置 :
        1. 透過	new AnnotationConfigApplicationContext(Java配置檔.class);
        2. 使用 getBean("Bean name" , Bean物件.class);
	
  4. DI 依賴注入(範例 : session02 -> Author)
    - 由 applicationContent.xml 注入參數 (會自動轉型)
	
	方法注入 :
	- <prototype>        : <property name="name(配合 Bean物件的參數名稱)"> <value>John</value> </property>
	- 簡化 p:            : <bean id="" class="" p:參數名稱="">  
       	
	
	建構子注入 :
	- <constructor-arg>  : <constructor-arg index="0" value="Mary"></constructor-arg> // index = 建構子參數順續
	- 簡化 c:            : <bean id="" class="" c:參數名稱="">  

  5. ref 參考配置(範例 : session02 -> Book)
    - 物件名-ref = "bean id" EX: p:name="Java" p:price="150" p:author-ref="author1" 
	
  6. autowire 自動配置(範例 : session02 -> Paper / Color / Size)
    - byType : 超過一個匹配型別就會發生錯誤(Paper 需要 Color and Size 當 <bean> 有超過1個可以匹配時就會發生錯誤)
	    EX: <bean id="paper1" p:id="101" autowire="byType" class="com.spring.core.session02.beans.Paper" />
            // 有兩個可以匹配則錯誤
			<bean id="color1" class="com.spring.core.session02.beans.Color" p:name="紅色" />		
		    <bean id="color2" class="com.spring.core.session02.beans.Color" p:name="白色" />
    
	- byName : 找到對應的 Bean物件 的參數名稱
        EX: Paper.class -> private Color color , private Size size 則對應 Bean id = "color" and "size"	

------------------------------------------------------------------------------------------------------------------------
  